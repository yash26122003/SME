generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  domain      String?  @unique
  settings    Json?
  plan        String   @default("basic") // basic, pro, enterprise
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  invitations Invitation[]

  @@map("organizations")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  passwordHash   String
  firstName      String
  lastName       String
  role           Role      @default(VIEWER)
  isActive       Boolean   @default(true)
  isVerified     Boolean   @default(false)
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  sessions       Session[]
  passwordResets PasswordReset[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  role           Role             @default(VIEWER)
  token          String           @unique
  status         InvitationStatus @default(PENDING)
  expiresAt      DateTime
  invitedBy      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@map("invitations")
}

enum Role {
  ADMIN
  ANALYST
  VIEWER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}
